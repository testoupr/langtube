{"version":3,"sources":["../src/types.ts","../package.json","../src/client.ts","../src/services/youtube.ts","../src/services/web.ts","../src/services/transcript.ts","../src/index.ts"],"names":["SupadataError","error","package_default","USER_AGENT","BaseClient","config","endpoint","params","method","url","queryParams","key","value","item","body","options","response","fetch","contentType","errorData","YouTubeService","jobId","min","max","operation","WebService","request","pages","nextUrl","TranscriptService","Supadata"],"mappings":"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","file":"index.cjs","sourcesContent":["export interface TranscriptChunk {\n  text: string;\n  offset: number;\n  duration: number;\n  lang: string;\n}\n\nexport interface Transcript {\n  content: TranscriptChunk[] | string;\n  lang: string;\n  availableLangs: string[];\n}\n\nexport interface TranslatedTranscript {\n  content: TranscriptChunk[] | string;\n  lang: string;\n}\n\nexport interface Scrape {\n  url: string;\n  content: string;\n  name: string;\n  description: string;\n  ogUrl: string;\n  countCharacters: number;\n  urls: string[];\n}\n\nexport interface SiteMap {\n  urls: string[];\n}\n\nexport interface CrawlRequest {\n  url: string;\n  limit?: number;\n}\n\nexport interface CrawlJob {\n  status: 'scraping' | 'completed' | 'failed' | 'cancelled';\n  pages?: Scrape[];\n  next?: string;\n}\n\nexport interface SupadataConfig {\n  apiKey: string;\n  baseUrl?: string;\n}\n\nexport class SupadataError extends Error {\n  error:\n    | 'invalid-request'\n    | 'internal-error'\n    | 'transcript-unavailable'\n    | 'not-found'\n    | 'unauthorized'\n    | 'upgrade-required'\n    | 'limit-exceeded';\n  details: string;\n  documentationUrl: string;\n\n  constructor(error: {\n    error: SupadataError['error'];\n    message?: string;\n    details?: string;\n    documentationUrl?: string;\n  }) {\n    super(error.message || 'An unexpected error occurred');\n    this.error = error.error || 'internal-error';\n    this.details = error.details || 'An unexpected error occurred';\n    this.documentationUrl = error.documentationUrl || '';\n    this.name = 'SupadataError';\n  }\n}\n\nexport interface YoutubeVideo {\n  id: string;\n  title: string;\n  description: string;\n  duration: number;\n  channel: {\n    id: string;\n    name: string;\n  };\n  tags: string[];\n  thumbnail: string;\n  uploadDate: string;\n  viewCount: number;\n  likeCount: number;\n  transcriptLanguages: string[];\n}\n\nexport interface YoutubeChannel {\n  id: string;\n  name: string;\n  handle: string;\n  description: string;\n  subscriberCount: number;\n  videoCount: number;\n  thumbnail: string;\n  banner: string;\n}\n\nexport interface YoutubePlaylist {\n  id: string;\n  title: string;\n  videoCount: number;\n  viewCount: number;\n  lastUpdated: string;\n  description: string;\n  thumbnail: string;\n}\n\nexport interface YoutubeBatchSource {\n  videoIds?: string[];\n  playlistId?: string;\n  channelId?: string;\n  limit?: number;\n}\n\nexport interface YoutubeTranscriptBatchRequest extends YoutubeBatchSource {\n  lang?: string;\n  text?: boolean;\n}\n\nexport interface YoutubeVideoBatchRequest extends YoutubeBatchSource {}\n\nexport interface JobId {\n  jobId: string;\n}\n\nexport interface YoutubeBatchJob extends JobId {}\n\nexport type JobStatus = 'queued' | 'active' | 'completed' | 'failed';\n\nexport type YoutubeBatchJobStatus = JobStatus;\n\nexport interface YoutubeBatchResultItem {\n  videoId: string;\n  transcript?: Transcript;\n  video?: YoutubeVideo;\n  errorCode?: string;\n}\n\nexport interface YoutubeBatchStats {\n  total: number;\n  succeeded: number;\n  failed: number;\n}\n\nexport interface YoutubeBatchResults {\n  status: YoutubeBatchJobStatus;\n  results?: YoutubeBatchResultItem[];\n  stats?: YoutubeBatchStats;\n  completedAt?: string;\n}\n\nexport type TranscriptOrJobId = Transcript | JobId;\n\nexport interface JobResult<T = any> {\n  status: JobStatus;\n  result?: T | null;\n  error?: {\n    error: SupadataError['error'];\n    message: string;\n    details: string;\n    documentationUrl?: string;\n  } | null;\n}\n\n// YouTube Search Types\nexport type YoutubeSearchUploadDate =\n  | 'all'\n  | 'hour'\n  | 'today'\n  | 'week'\n  | 'month'\n  | 'year';\nexport type YoutubeSearchType =\n  | 'all'\n  | 'video'\n  | 'channel'\n  | 'playlist'\n  | 'movie';\nexport type YoutubeSearchDuration = 'all' | 'short' | 'medium' | 'long';\nexport type YoutubeSearchSortBy = 'relevance' | 'rating' | 'date' | 'views';\n\nexport interface YoutubeSearchParams {\n  query: string;\n  uploadDate?: YoutubeSearchUploadDate;\n  type?: YoutubeSearchType;\n  duration?: YoutubeSearchDuration;\n  sortBy?: YoutubeSearchSortBy;\n  features?: string[];\n  limit?: number;\n  nextPageToken?: string;\n}\n\nexport interface YoutubeSearchVideoResult {\n  type: 'video';\n  id: string;\n  title: string;\n  description: string;\n  thumbnail: string;\n  duration: number;\n  viewCount: number;\n  uploadDate: string;\n  channel: {\n    id: string;\n    name: string;\n  };\n}\n\nexport interface YoutubeSearchChannelResult {\n  type: 'channel';\n  id: string;\n  name: string;\n  handle: string;\n  description: string;\n  thumbnail: string;\n  subscriberCount: number;\n  videoCount: number;\n}\n\nexport interface YoutubeSearchPlaylistResult {\n  type: 'playlist';\n  id: string;\n  title: string;\n  description: string;\n  thumbnail: string;\n  videoCount: number;\n  channel: {\n    id: string;\n    name: string;\n  };\n}\n\nexport type YoutubeSearchResult =\n  | YoutubeSearchVideoResult\n  | YoutubeSearchChannelResult\n  | YoutubeSearchPlaylistResult;\n\nexport interface YoutubeSearchResponse {\n  query: string;\n  results: YoutubeSearchResult[];\n  totalResults: number;\n  nextPageToken?: string;\n}\n","{\n  \"name\": \"@supadata/js\",\n  \"version\": \"1.3.0\",\n  \"description\": \"TypeScript / JavaScript SDK for Supadata API\",\n  \"homepage\": \"https://supadata.ai\",\n  \"repository\": \"https://github.com/supadata-ai/js\",\n  \"main\": \"./dist/index.cjs\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./dist/index.d.ts\",\n      \"import\": \"./dist/index.mjs\",\n      \"require\": \"./dist/index.cjs\",\n      \"default\": \"./dist/index.mjs\"\n    }\n  },\n  \"scripts\": {\n    \"dev\": \"tsup --watch\",\n    \"build\": \"tsup\",\n    \"test\": \"node --experimental-vm-modules node_modules/jest/bin/jest.js\",\n    \"prepare\": \"npm run build\",\n    \"format\": \"prettier --write \\\"src/**/*.{js,ts}\\\"\",\n    \"format:check\": \"prettier --check \\\"src/**/*.{js,ts}\\\"\"\n  },\n  \"files\": [\n    \"dist\",\n    \"README.md\"\n  ],\n  \"keywords\": [\n    \"supadata\",\n    \"api\",\n    \"sdk\",\n    \"typescript\",\n    \"youtube\",\n    \"transcript\",\n    \"web scraping\"\n  ],\n  \"author\": \"Supadata AI\",\n  \"license\": \"MIT\",\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"dependencies\": {\n    \"cross-fetch\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/jest\": \"^29.5.14\",\n    \"@types/node\": \"^22.10.10\",\n    \"jest\": \"^29.7.0\",\n    \"jest-fetch-mock\": \"^3.0.3\",\n    \"prettier\": \"^3.4.2\",\n    \"ts-jest\": \"^29.2.5\",\n    \"typescript\": \"^5.7.3\",\n    \"tsup\": \"^8.3.6\"\n  }\n}","import fetch from 'cross-fetch';\nimport { SupadataConfig, SupadataError } from './types.js';\n// @ts-expect-error: Non-TS import for version from package.json\nimport pkg from '../package.json';\n\nconst USER_AGENT = `supadata-js/${pkg.version}`;\n\nexport class BaseClient {\n  protected config: SupadataConfig;\n\n  constructor(config: SupadataConfig) {\n    this.config = config;\n  }\n\n  protected async fetch<T>(\n    endpoint: string,\n    params: Record<string, any> = {},\n    method: 'GET' | 'POST' = 'GET'\n  ): Promise<T> {\n    const baseUrl = this.config.baseUrl || 'https://api.supadata.ai/v1';\n    let url = `${baseUrl}${\n      endpoint.startsWith('/') ? endpoint : `/${endpoint}`\n    }`;\n\n    if (method === 'GET' && Object.keys(params).length > 0) {\n      const queryParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (Array.isArray(value)) {\n            value.forEach((item) => queryParams.append(key, String(item)));\n          } else {\n            queryParams.append(key, String(value));\n          }\n        }\n      });\n      url += `?${queryParams.toString()}`;\n    }\n\n    return this.fetchUrl<T>(url, method, params);\n  }\n\n  protected async fetchUrl<T>(\n    url: string,\n    method: 'GET' | 'POST' = 'GET',\n    body?: Record<string, any>\n  ): Promise<T> {\n    const options: RequestInit = {\n      method,\n      headers: {\n        'x-api-key': this.config.apiKey,\n        'Content-Type': 'application/json',\n        'User-Agent': USER_AGENT,\n      },\n    };\n\n    if (method === 'POST' && body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(url, options);\n\n    const contentType = response.headers.get('content-type');\n\n    if (!response.ok) {\n      // Handle standard API errors\n      if (contentType?.includes('application/json')) {\n        const errorData = await response.json();\n        throw new SupadataError(errorData);\n      } else {\n        // Fallback for unexpected non-JSON errors\n        throw new SupadataError({\n          error: 'internal-error',\n          message: 'Unexpected error response format',\n          details: await response.text(),\n        });\n      }\n    }\n\n    try {\n      if (!contentType?.includes('application/json')) {\n        throw new SupadataError({\n          error: 'internal-error',\n          message: 'Invalid response format',\n          details: 'Expected JSON response but received different content type',\n        });\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      throw new SupadataError({\n        error: 'internal-error',\n        message: 'Failed to parse response',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n}\n","import { BaseClient } from '../client.js';\nimport {\n  SupadataError,\n  Transcript,\n  TranslatedTranscript,\n  YoutubeBatchJob,\n  YoutubeBatchResults,\n  YoutubeChannel,\n  YoutubePlaylist,\n  YoutubeTranscriptBatchRequest,\n  YoutubeVideo,\n  YoutubeVideoBatchRequest,\n  YoutubeSearchParams,\n  YoutubeSearchResponse,\n} from '../types.js';\n\n/**\n * Ensures exactly one property from the specified keys is provided.\n * @example\n * // Valid: { url: \"...\" } or { videoId: \"...\" }\n * // Invalid: {} or { url: \"...\", videoId: \"...\" }\n */\ntype ExactlyOne<T, Keys extends keyof T> = {\n  [K in Keys]: { [P in K]-?: T[P] } & { [P in Exclude<Keys, K>]?: never };\n}[Keys] &\n  Omit<T, Keys>;\n\nexport type TranscriptParams = {\n  lang?: string;\n  text?: boolean;\n} & ExactlyOne<{ videoId: string; url: string }, 'videoId' | 'url'>;\n\nexport interface TranslateParams extends Omit<TranscriptParams, 'lang'> {\n  lang: string;\n}\n\nexport interface ResourceParams {\n  id: string;\n}\n\nexport interface ChannelVideosParams extends ResourceParams {\n  limit?: number;\n  type?: 'video' | 'short' | 'live' | 'all';\n}\n\nexport interface PlaylistVideosParams extends ResourceParams {\n  limit?: number;\n}\n\nexport interface VideoIds {\n  videoIds: string[];\n  shortIds: string[];\n  liveIds: string[];\n}\n\nexport class YouTubeService extends BaseClient {\n  /**\n   * Handles YouTube Transcript operations.\n   */\n  transcript = Object.assign(\n    /**\n     * Fetches a transcript for a YouTube video.\n     * @param params - Parameters for fetching the transcript\n     * @param params.videoId - The YouTube video ID (mutually exclusive with url)\n     * @param params.url - The YouTube video URL (mutually exclusive with videoId)\n     * @param params.lang - The language code for the transcript (optional)\n     * @param params.text - Whether to return only the text content (optional)\n     * @returns A promise that resolves to a Transcript object\n     */\n    async (params: TranscriptParams): Promise<Transcript> => {\n      return this.fetch<Transcript>('/youtube/transcript', params);\n    },\n    {\n      /**\n       * Batch fetches transcripts for multiple YouTube videos.\n       * @param params - Parameters for the transcript batch job\n       * @param params.videoIds - Array of YouTube video IDs to fetch transcripts for\n       * @param params.lang - The language code for the transcripts (optional)\n       * @param params.limit - Maximum number of videos to process (optional, default: 10, max: 5000)\n       * @param params.text - Whether to return only the text content (optional)\n       * @returns A promise that resolves to a YoutubeBatchJob object with the job ID\n       */\n      batch: async (\n        params: YoutubeTranscriptBatchRequest\n      ): Promise<YoutubeBatchJob> => {\n        this.validateLimit(params, 1, 5000, 'batch operation');\n        return this.fetch<YoutubeBatchJob>(\n          '/youtube/transcript/batch',\n          params,\n          'POST'\n        );\n      },\n    }\n  );\n\n  /**\n   * Handles YouTube video operations.\n   */\n  video = Object.assign(\n    /**\n     * Fetches a YouTube video based on the provided parameters.\n     * @param params - The parameters required to fetch the YouTube video\n     * @param params.id - The YouTube video ID\n     * @returns A promise that resolves to a YoutubeVideo object\n     */\n    async (params: ResourceParams): Promise<YoutubeVideo> => {\n      return this.fetch<YoutubeVideo>('/youtube/video', params);\n    },\n    {\n      /**\n       * Batch fetches metadata for multiple YouTube videos.\n       * @param params - Parameters for the video metadata batch job\n       * @param params.videoIds - Array of YouTube video IDs to fetch metadata for\n       * @param params.limit - Maximum number of videos to process (optional, default: 10, max: 5000)\n       * @returns A promise that resolves to a YoutubeBatchJob object with the job ID\n       */\n      batch: async (\n        params: YoutubeVideoBatchRequest\n      ): Promise<YoutubeBatchJob> => {\n        this.validateLimit(params, 1, 5000, 'batch operation');\n        return this.fetch<YoutubeBatchJob>(\n          '/youtube/video/batch',\n          params,\n          'POST'\n        );\n      },\n    }\n  );\n\n  /**\n   * Handles YouTube channel operations.\n   */\n  channel = Object.assign(\n    /**\n     * Fetches YouTube channel information.\n     * @param params - The parameters required to fetch the YouTube channel information\n     * @param params.id - The YouTube channel ID\n     * @returns A promise that resolves to a YoutubeChannel object containing the channel information\n     */\n    async (params: ResourceParams): Promise<YoutubeChannel> => {\n      return this.fetch<YoutubeChannel>('/youtube/channel', params);\n    },\n    {\n      /**\n       * Fetches the videos of a YouTube channel.\n       * @param params - The parameters required to fetch the YouTube channel videos\n       * @param params.id - The YouTube channel ID\n       * @param params.limit - The maximum number of videos to fetch (default: 30, max: 5000)\n       * @param params.type - The type of videos to fetch ('video', 'short', 'live', or 'all', default: 'video')\n       * @returns A promise that resolves to an object containing arrays of video IDs, short IDs, and live IDs\n       * @throws {SupadataError} If the limit is invalid (less than 1 or greater than 5000)\n       */\n      videos: async (params: ChannelVideosParams): Promise<VideoIds> => {\n        this.validateLimit(params);\n        return this.fetch<VideoIds>('/youtube/channel/videos', params);\n      },\n    }\n  );\n\n  /**\n   * Handles YouTube playlist operations.\n   */\n  playlist = Object.assign(\n    /**\n     * Fetches a YouTube playlist.\n     * @param params - The parameters required to fetch the playlist\n     * @param params.id - The YouTube playlist ID\n     * @returns A promise that resolves to a YoutubePlaylist object\n     */\n    async (params: ResourceParams): Promise<YoutubePlaylist> => {\n      return this.fetch<YoutubePlaylist>('/youtube/playlist', params);\n    },\n    {\n      /**\n       * Fetches the videos of a YouTube playlist.\n       * @param params - The parameters required to fetch the playlist videos\n       * @param params.id - The YouTube playlist ID\n       * @param params.limit - The maximum number of videos to fetch (default: 30, max: 5000)\n       * @returns A promise that resolves to an object containing arrays of video IDs, short IDs, and live IDs\n       * @throws {SupadataError} If the limit is invalid (less than 1 or greater than 5000)\n       */\n      videos: async (params: PlaylistVideosParams): Promise<VideoIds> => {\n        this.validateLimit(params);\n        return this.fetch<VideoIds>('/youtube/playlist/videos', params);\n      },\n    }\n  );\n\n  /**\n   * Handles YouTube batch operations.\n   */\n  batch = {\n    /**\n     * Retrieves the status and results of a batch job.\n     * @param jobId - The ID of the batch job\n     * @returns A promise that resolves to the YoutubeBatchResults containing job status and results\n     * @throws {SupadataError} If jobId is not provided\n     */\n    getBatchResults: async (jobId: string): Promise<YoutubeBatchResults> => {\n      if (!jobId) {\n        throw new SupadataError({\n          error: 'invalid-request',\n          message: 'Missing jobId',\n          details: 'The jobId parameter is required to get batch results.',\n        });\n      }\n      return this.fetch<YoutubeBatchResults>(`/youtube/batch/${jobId}`);\n    },\n  };\n\n  /**\n   * Translates a YouTube video transcript to a specified language.\n   * @param params - Parameters for translating the transcript\n   * @param params.videoId - The YouTube video ID (mutually exclusive with url)\n   * @param params.url - The YouTube video URL (mutually exclusive with videoId)\n   * @param params.lang - The target language code for translation\n   * @param params.text - Whether to return only the text content (optional)\n   * @returns A promise that resolves to a TranslatedTranscript object\n   */\n  translate = async (\n    params: TranslateParams\n  ): Promise<TranslatedTranscript> => {\n    return this.fetch<TranslatedTranscript>(\n      '/youtube/transcript/translate',\n      params\n    );\n  };\n\n  /**\n   * Search YouTube for videos, channels, and playlists with advanced filters.\n   * @param params - Parameters for the search\n   * @param params.query - The search query string\n   * @param params.uploadDate - Filter by upload date (\"all\", \"hour\", \"today\", \"week\", \"month\", \"year\")\n   * @param params.type - Filter by content type (\"all\", \"video\", \"channel\", \"playlist\", \"movie\")\n   * @param params.duration - Filter video length (\"all\", \"short\", \"medium\", \"long\")\n   * @param params.sortBy - Sort results by (\"relevance\", \"rating\", \"date\", \"views\")\n   * @param params.features - Array of special video features\n   * @param params.limit - Maximum results to return\n   * @param params.nextPageToken - Token for pagination\n   * @returns A promise that resolves to a YoutubeSearchResponse object\n   */\n  search = async (\n    params: YoutubeSearchParams\n  ): Promise<YoutubeSearchResponse> => {\n    if (!params.query) {\n      throw new SupadataError({\n        error: 'invalid-request',\n        message: 'Missing query parameter',\n        details: 'The query parameter is required for search.',\n      });\n    }\n\n    this.validateLimit(params, 1, 5000, 'search');\n\n    return this.fetch<YoutubeSearchResponse>('/youtube/search', params);\n  };\n\n  private validateLimit(\n    params: { limit?: number },\n    min: number = 1,\n    max: number = 5000,\n    operation: string = 'operation'\n  ) {\n    if (\n      params.limit != undefined &&\n      params.limit != null &&\n      (params.limit < min || params.limit > max)\n    ) {\n      throw new SupadataError({\n        error: 'invalid-request',\n        message: `Invalid limit for ${operation}.`,\n        details: `The limit must be between ${min} and ${max}.`,\n      });\n    }\n  }\n}\n","import { BaseClient } from '../client.js';\nimport { CrawlJob, CrawlRequest, JobId, Scrape, SiteMap } from '../types.js';\n\nexport class WebService extends BaseClient {\n  /**\n   * Extract content from any web page to Markdown format.\n   *\n   * @param url - URL of the webpage to scrape\n   * @returns A promise that resolves to the scraped content\n   */\n  async scrape(url: string): Promise<Scrape> {\n    return this.fetch<Scrape>('/web/scrape', { url });\n  }\n\n  /**\n   * Extract all links found on a webpage.\n   *\n   * @param url - URL of the webpage to map\n   * @returns A promise that resolves to a map of URLs found on the page\n   */\n  async map(url: string): Promise<SiteMap> {\n    return this.fetch<SiteMap>('/web/map', { url });\n  }\n\n  /**\n   * Create a crawl job to extract content from all pages on a website.\n   *\n   * @param request - Crawl request parameters\n   * @param request.url - URL of the website to crawl\n   * @param request.limit - Maximum number of pages to crawl (default: 100, max: 5000)\n   * @returns A promise that resolves to the crawl job id\n   */\n  async crawl(request: CrawlRequest): Promise<JobId> {\n    return this.fetch<JobId>('/web/crawl', request, 'POST');\n  }\n\n  /**\n   * Get the status and results of a crawl job.\n   * Automatically handles pagination to retrieve all pages from the crawl.\n   *\n   * @param jobId - The ID of the crawl job to retrieve\n   * @returns A promise that resolves to the complete crawl job results\n   */\n  async getCrawlResults(jobId: string): Promise<CrawlJob> {\n    let response: CrawlJob;\n    let pages: Scrape[] = [];\n    let nextUrl: string | undefined;\n\n    do {\n      response = await (nextUrl\n        ? this.fetchUrl<CrawlJob>(nextUrl)\n        : this.fetch<CrawlJob>(`/web/crawl/${jobId}`));\n\n      if (response.pages) {\n        pages = [...pages, ...response.pages];\n      }\n      nextUrl = response.next;\n    } while (nextUrl);\n\n    return response;\n  }\n}\n","import { BaseClient } from '../client.js';\nimport {\n  JobId,\n  JobResult,\n  SupadataError,\n  Transcript,\n  TranscriptOrJobId,\n} from '../types.js';\n\nexport interface GeneralTranscriptParams {\n  url: string;\n  lang?: string;\n  text?: boolean;\n  chunkSize?: number;\n  mode?: 'native' | 'auto' | 'generate';\n}\n\nexport class TranscriptService extends BaseClient {\n  /**\n   * Get transcript from a supported video platform or file URL.\n   * @param params - Parameters for fetching the transcript\n   * @returns A promise that resolves to either a Transcript or JobId for async processing\n   */\n  get = async (params: GeneralTranscriptParams): Promise<TranscriptOrJobId> => {\n    return this.fetch<TranscriptOrJobId>('/transcript', params);\n  };\n\n  /**\n   * Get results for a transcript job by job ID.\n   * @param jobId - The ID of the transcript job\n   * @returns A promise that resolves to the job result containing status and transcript if completed\n   * @throws {SupadataError} If jobId is not provided\n   */\n  getJobStatus = async (jobId: string): Promise<JobResult<Transcript>> => {\n    if (!jobId) {\n      throw new SupadataError({\n        error: 'invalid-request',\n        message: 'Missing jobId',\n        details:\n          'The jobId parameter is required to get transcript job status.',\n      });\n    }\n    return this.fetch<JobResult<Transcript>>(`/transcript/${jobId}`);\n  };\n}\n","import {\n  JobResult,\n  SupadataConfig,\n  Transcript,\n  TranscriptOrJobId,\n} from './types.js';\nimport { YouTubeService } from './services/youtube.js';\nimport { WebService } from './services/web.js';\nimport {\n  TranscriptService,\n  GeneralTranscriptParams,\n} from './services/transcript.js';\n\nexport * from './types.js';\nexport * from './client.js';\nexport * from './services/youtube.js';\nexport * from './services/web.js';\nexport {\n  TranscriptService,\n  GeneralTranscriptParams,\n} from './services/transcript.js';\n\nexport class Supadata {\n  readonly youtube: YouTubeService;\n  readonly web: WebService;\n  private _transcriptService: TranscriptService;\n\n  constructor(config: SupadataConfig) {\n    this.youtube = new YouTubeService(config);\n    this.web = new WebService(config);\n    this._transcriptService = new TranscriptService(config);\n  }\n\n  /**\n   * Get transcript from a supported video platform (YouTube, TikTok, Instagram, Twitter) or file URL.\n   * If the video is too large to return transcript immediately, request returns a job ID.\n   */\n  transcript = Object.assign(\n    async (params: GeneralTranscriptParams): Promise<TranscriptOrJobId> => {\n      return this._transcriptService.get(params);\n    },\n    {\n      getJobStatus: (jobId: string): Promise<JobResult<Transcript>> => {\n        return this._transcriptService.getJobStatus(jobId);\n      },\n    }\n  );\n}\n"]}